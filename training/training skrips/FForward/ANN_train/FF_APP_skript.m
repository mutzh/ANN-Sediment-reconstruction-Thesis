% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 05-Aug-2020 10:24:02
%
% This script assumes these variables are defined:
%
load('data_NarxN')

X_test=data_NarxN(1:2809,1)';
T_test=data_NarxN(1:2809,2)';
X=data_NarxN(2810:end,1)';
T=data_NarxN(2810:end,2)';


% Create a Fitting Network
hiddenLayerSize = [11,11];
TF=5;
rng(5);

net = feedforwardnet(hiddenLayerSize);


% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideParam.trainRatio = 82.5/100;
net.divideParam.valRatio = 17.5/100;
net.divideParam.testRatio = 0/100;

net.trainParam.epochs=50;
net.performParam.normalization='standard';
net.trainParam.max_fail=4;


%transfer functions
%-----------------------------------------------------------------
if TF==1
        net.layers{1}.transferFcn='tansig';
        net.layers{2}.transferFcn='tansig';
        net.layers{3}.transferFcn='tansig';
end
if TF==2
        net.layers{1}.transferFcn='tansig';
        net.layers{2}.transferFcn='tansig';
        net.layers{3}.transferFcn='purelin';
end
if TF==3
        net.layers{1}.transferFcn='tansig';
        net.layers{2}.transferFcn='logsig';
        net.layers{3}.transferFcn='tansig';
end
if TF==4
        net.layers{1}.transferFcn='tansig';
        net.layers{2}.transferFcn='logsig';
        net.layers{3}.transferFcn='purelin';
end
if TF==5
        net.layers{1}.transferFcn='logsig';
        net.layers{2}.transferFcn='tansig';
        net.layers{3}.transferFcn='tansig';
end
if TF==6
        net.layers{1}.transferFcn='logsig';
        net.layers{2}.transferFcn='tansig';
        net.layers{3}.transferFcn='purelin';
end
if TF==7
        net.layers{1}.transferFcn='logsig';
        net.layers{2}.transferFcn='logsig';
        net.layers{3}.transferFcn='tansig';
end
if TF==8
        net.layers{1}.transferFcn='logsig';
        net.layers{2}.transferFcn='logsig';
        net.layers{3}.transferFcn='purelin';
end
%-----------------------------------------------------------------


% Train the Network
[net,tr] = train(net,X,T);

% % Test the Network
% y = net(X);
% e = gsubtract(T,y);
% performance = perform(net,T,y)
% 
% % Recalculate Training, Validation and Test Performance
% trainTargets = T .* tr.trainMask{1};
% valTargets = T .* tr.valMask{1};
% % testTargets = T .* tr.testMask{1};
% % trainPerformance = perform(net,trainTargets,y)
% valPerformance = perform(net,valTargets,y)


%calculate NSE on exta test set
output = net(X_test);
[NSE] = ns_efficiency(T_test,output)

Ts_e=gsubtract(T_test,output);
Ts_e=Ts_e;
% Ts_PBIAS=sum(Ts_e*100)/sum(TARGET);
Ts_mse=mse(Ts_e)
Ts_RMSE=(Ts_mse)^.5

figure;
plotregression(T_test,output);


